apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.prod.yaml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
  namespace: reporter
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yaml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.network/redis-net: "true"
        io.kompose.service: redis
    spec:
      containers:
      - args:
        - redis-server
        - --requirepass
        - "$(REDIS_PASSWORD)"
        - --port
        - "$(REDIS_PORT)"
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: REDIS_HOST
              name: env
        - name: REDIS_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: REDIS_PASSWORD
              name: env
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              key: REDIS_PORT
              name: env
        image: redis:5.0.8-buster
        imagePullPolicy: "Always"
        name: redis
        ports:
        - containerPort: 6379
        resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 128Mi
        volumeMounts:
        - mountPath: /data
          name: redis-data
      hostname: redis
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
      imagePullSecrets:
      - name: docker.greymatter.io
status: {}
